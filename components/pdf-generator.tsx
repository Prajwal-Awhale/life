"use client"

import type React from "react"
import { Button } from "@/components/ui/button"
import { Download } from "lucide-react"
import html2canvas from "html2canvas"
import jsPDF from "jspdf"
import { useState } from "react"

interface PdfGeneratorProps {
  cardRef: React.RefObject<HTMLDivElement>
  emergencyRef?: React.RefObject<HTMLDivElement>
  plan: "digital" | "physical"
  cardId: string
}

export function PdfGenerator({ cardRef, emergencyRef, plan, cardId }: PdfGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false)

  const generatePdf = async () => {
    if (!cardRef.current) return

    setIsGenerating(true)

    try {
      const pdf = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      })

      // Add title
      pdf.setFontSize(20)
      pdf.setTextColor(220, 38, 38) // Red color
      pdf.text("Lifekey Health Card", 105, 20, { align: "center" })
      pdf.setFontSize(12)
      pdf.setTextColor(100, 100, 100)
      pdf.text(`Card ID: ${cardId}`, 105, 27, { align: "center" })
      pdf.setDrawColor(220, 38, 38)
      pdf.line(20, 30, 190, 30)

      // Generate health card image with better settings
      const cardCanvas = await html2canvas(cardRef.current, {
        scale: 3,
        logging: false,
        useCORS: true,
        allowTaint: true,
        backgroundColor: "#ffffff",
        width: cardRef.current.offsetWidth,
        height: cardRef.current.offsetHeight,
        onclone: (document, element) => {
          // Ensure all images are loaded before capturing
          const images = element.getElementsByTagName("img")
          for (let i = 0; i < images.length; i++) {
            const img = images[i]
            img.crossOrigin = "anonymous"
          }
        },
      })
      const cardImgData = cardCanvas.toDataURL("image/png", 1.0)

      // Add health card to PDF
      const cardImgWidth = 170
      const cardImgHeight = (cardCanvas.height * cardImgWidth) / cardCanvas.width
      pdf.addImage(cardImgData, "PNG", 20, 35, cardImgWidth, cardImgHeight)

      // For digital plan, also add emergency view on the same page
      if (plan === "digital" && emergencyRef?.current) {
        // Add emergency section title
        const emergencyStartY = 35 + cardImgHeight + 10
        pdf.setFontSize(14)
        pdf.setTextColor(220, 38, 38)
        pdf.text("Emergency Information Preview", 105, emergencyStartY, { align: "center" })
        pdf.setDrawColor(220, 38, 38)
        pdf.line(20, emergencyStartY + 3, 190, emergencyStartY + 3)

        // Generate emergency view image
        const emergencyCanvas = await html2canvas(emergencyRef.current, {
          scale: 2,
          logging: false,
          useCORS: true,
          allowTaint: true,
          backgroundColor: "#ffffff",
          width: emergencyRef.current.offsetWidth,
          height: emergencyRef.current.offsetHeight,
          onclone: (document, element) => {
            // Ensure all images are loaded before capturing
            const images = element.getElementsByTagName("img")
            for (let i = 0; i < images.length; i++) {
              const img = images[i]
              img.crossOrigin = "anonymous"
            }
          },
        })
        const emergencyImgData = emergencyCanvas.toDataURL("image/png", 1.0)

        // Calculate dimensions to fit on same page
        const emergencyImgWidth = 170
        const emergencyImgHeight = (emergencyCanvas.height * emergencyImgWidth) / emergencyCanvas.width

        // Scale down emergency view if needed to fit on same page
        const availableHeight = 280 - emergencyStartY - 20
        const finalEmergencyHeight = Math.min(emergencyImgHeight, availableHeight)
        const finalEmergencyWidth = (emergencyImgWidth * finalEmergencyHeight) / emergencyImgHeight

        pdf.addImage(emergencyImgData, "PNG", 20, emergencyStartY + 8, finalEmergencyWidth, finalEmergencyHeight)
      }

      // Add footer
      pdf.setFontSize(10)
      pdf.setTextColor(150, 150, 150)
      pdf.text("Generated by Lifekey - For emergency use only", 105, 285, { align: "center" })

      // Save the PDF
      pdf.save(`lifekey-health-card-${cardId}.pdf`)
    } catch (error) {
      console.error("Error generating PDF:", error)
      alert("There was an error generating your PDF. Please try again.")
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <Button onClick={generatePdf} className="flex items-center gap-2" disabled={isGenerating}>
      {isGenerating ? (
        <>
          <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
          Generating...
        </>
      ) : (
        <>
          <Download className="w-4 h-4" />
          Download Health Card
        </>
      )}
    </Button>
  )
}
